# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class TradeUpdate(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TradeUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTradeUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # TradeUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TradeUpdate
    def Trades(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 32
            from Trade import Trade

            obj = Trade()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TradeUpdate
    def TradesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TradeUpdate
    def TradesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0


def TradeUpdateStart(builder):
    builder.StartObject(1)


def Start(builder):
    return TradeUpdateStart(builder)


def TradeUpdateAddTrades(builder, trades):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(trades), 0
    )


def AddTrades(builder, trades):
    return TradeUpdateAddTrades(builder, trades)


def TradeUpdateStartTradesVector(builder, numElems):
    return builder.StartVector(32, numElems, 8)


def StartTradesVector(builder, numElems):
    return TradeUpdateStartTradesVector(builder, numElems)


def TradeUpdateEnd(builder):
    return builder.EndObject()


def End(builder):
    return TradeUpdateEnd(builder)
