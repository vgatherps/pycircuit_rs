# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class Trade(object):
    __slots__ = ["_tab"]

    @classmethod
    def SizeOf(cls):
        return 32

    # Trade
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Trade
    def Price(self):
        return self._tab.Get(
            flatbuffers.number_types.Float64Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0),
        )

    # Trade
    def Size(self):
        return self._tab.Get(
            flatbuffers.number_types.Float64Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8),
        )

    # Trade
    def ExchangeTimeUs(self):
        return self._tab.Get(
            flatbuffers.number_types.Int64Flags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16),
        )

    # Trade
    def Buy(self):
        return self._tab.Get(
            flatbuffers.number_types.BoolFlags,
            self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24),
        )


def CreateTrade(builder, price, size, exchangeTimeUs, buy):
    builder.Prep(8, 32)
    builder.Pad(7)
    builder.PrependBool(buy)
    builder.PrependInt64(exchangeTimeUs)
    builder.PrependFloat64(size)
    builder.PrependFloat64(price)
    return builder.Offset()
