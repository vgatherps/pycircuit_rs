# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class BboUpdate(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BboUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsBboUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # BboUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BboUpdate
    def Bid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from Level import Level

            obj = Level()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BboUpdate
    def Ask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Level import Level

            obj = Level()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BboUpdate
    def ExchangeTimeUs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0


def BboUpdateStart(builder):
    builder.StartObject(3)


def Start(builder):
    return BboUpdateStart(builder)


def BboUpdateAddBid(builder, bid):
    builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bid), 0)


def AddBid(builder, bid):
    return BboUpdateAddBid(builder, bid)


def BboUpdateAddAsk(builder, ask):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(ask), 0)


def AddAsk(builder, ask):
    return BboUpdateAddAsk(builder, ask)


def BboUpdateAddExchangeTimeUs(builder, exchangeTimeUs):
    builder.PrependInt64Slot(2, exchangeTimeUs, 0)


def AddExchangeTimeUs(builder, exchangeTimeUs):
    return BboUpdateAddExchangeTimeUs(builder, exchangeTimeUs)


def BboUpdateEnd(builder):
    return builder.EndObject()


def End(builder):
    return BboUpdateEnd(builder)
