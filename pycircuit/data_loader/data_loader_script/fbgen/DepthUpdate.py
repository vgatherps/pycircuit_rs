# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class DepthUpdate(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DepthUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDepthUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # DepthUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DepthUpdate
    def Bids(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from Level import Level

            obj = Level()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DepthUpdate
    def BidsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DepthUpdate
    def BidsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # DepthUpdate
    def Asks(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 16
            from Level import Level

            obj = Level()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DepthUpdate
    def AsksLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DepthUpdate
    def AsksIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # DepthUpdate
    def ExchangeTimeUs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0


def DepthUpdateStart(builder):
    builder.StartObject(3)


def Start(builder):
    return DepthUpdateStart(builder)


def DepthUpdateAddBids(builder, bids):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(bids), 0
    )


def AddBids(builder, bids):
    return DepthUpdateAddBids(builder, bids)


def DepthUpdateStartBidsVector(builder, numElems):
    return builder.StartVector(16, numElems, 8)


def StartBidsVector(builder, numElems):
    return DepthUpdateStartBidsVector(builder, numElems)


def DepthUpdateAddAsks(builder, asks):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(asks), 0
    )


def AddAsks(builder, asks):
    return DepthUpdateAddAsks(builder, asks)


def DepthUpdateStartAsksVector(builder, numElems):
    return builder.StartVector(16, numElems, 8)


def StartAsksVector(builder, numElems):
    return DepthUpdateStartAsksVector(builder, numElems)


def DepthUpdateAddExchangeTimeUs(builder, exchangeTimeUs):
    builder.PrependInt64Slot(2, exchangeTimeUs, 0)


def AddExchangeTimeUs(builder, exchangeTimeUs):
    return DepthUpdateAddExchangeTimeUs(builder, exchangeTimeUs)


def DepthUpdateEnd(builder):
    return builder.EndObject()


def End(builder):
    return DepthUpdateEnd(builder)
