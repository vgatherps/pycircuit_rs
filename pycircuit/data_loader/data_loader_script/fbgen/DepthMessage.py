# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class DepthMessage(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DepthMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsDepthMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # DepthMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DepthMessage
    def LocalTimeUs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # DepthMessage
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from DepthUpdate import DepthUpdate

            obj = DepthUpdate()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None


def DepthMessageStart(builder):
    builder.StartObject(2)


def Start(builder):
    return DepthMessageStart(builder)


def DepthMessageAddLocalTimeUs(builder, localTimeUs):
    builder.PrependInt64Slot(0, localTimeUs, 0)


def AddLocalTimeUs(builder, localTimeUs):
    return DepthMessageAddLocalTimeUs(builder, localTimeUs)


def DepthMessageAddMessage(builder, message):
    builder.PrependUOffsetTRelativeSlot(
        1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0
    )


def AddMessage(builder, message):
    return DepthMessageAddMessage(builder, message)


def DepthMessageEnd(builder):
    return builder.EndObject()


def End(builder):
    return DepthMessageEnd(builder)
